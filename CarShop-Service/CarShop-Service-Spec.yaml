openapi: 3.0.3
info:
  title: CarShop-Service
  description: Car shop service API specification
  version: 1.0.0
paths:
  /users:
    post:
      summary: Creates a new user
      operationId: createUser
      requestBody:
        description: The new user data.
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/new_user"
                - required: [ username, phone_number, email, password ]
      responses:
        '201':
          description: The user was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_user"
        '409':
          description: The given username was already taken

  /users/me:
    get:
      summary: Fetches current user data.
      operationId: findCurrentUser
      responses:
        '200':
          description: The current user information was found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_user"
    patch:
      summary: Patch current user.
      operationId: editCurrentUser
      requestBody:
        description: The user patch data. The omitted fields will remain the same.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_user"
      responses:
        '200':
          description: The current user was successfully patched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_user"
        '409':
          description: The given username was already taken.
    delete:
      summary: Deletes the current user.
      operationId: deleteCurrentUser
      responses:
        '204':
          description: The current user was successfully deleted.

  /users/{userId}:
    get:
      summary: Fetches user data by id.
      operationId: findUserById
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The user with the given id was found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_user"
        '404':
          description: Could not find a user with the given id.
    patch:
      summary: Patches the user with the given id.
      operationId: editUserById
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
      requestBody:
        description: The user patch data. The omitted fields will remain the same.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_user"
      responses:
        '200':
          description: The user with the given id was successfully patched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_user"
        '404':
          description: Could not find a user by the given id.
        '409':
          description: The given username was already taken.
    delete:
      summary: Deletes the user with the given id.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
        - name: cascade
          in: query
          description: If true deletes all orders related to this user.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The user with the given id was successfully deleted.
        '404':
          description: Could not find a user by the given id.

  /users/search:
    post:
      summary: Searches for users matching the given query.
      operationId: searchUsers
      requestBody:
        description: The query
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_query"
      responses:
        '200':
          description: The search has completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/existing_user"

  /cars:
    post:
      summary: Creates a new car.
      operationId: createCar
      requestBody:
        description: Car info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_car"
      responses:
        '201':
          description: The car was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_car"

  /cars/{carId}:
    get:
      summary: Fetches car info by id.
      operationId: findCarById
      parameters:
        - name: carId
          in: path
          description: Car id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The car was found successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_car"
        '404':
          description: Could not find a car by the given id.
    patch:
      summary: Patches the car by id.
      operationId: editCarById
      parameters:
        - name: carId
          in: path
          description: Car id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The car was patched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_car"
        '404':
          description: Could not find a car by the given id.
    delete:
      summary: Deletes the car by id.
      operationId: deleteCarById
      parameters:
        - name: carId
          in: path
          description: Car id
          required: true
          schema:
            type: integer
        - name: cascade
          in: query
          description: If true, related orders will also be deleted.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The car was deleted successfully.
        '404':
          description: Could not find a car by the given id.

  /cars/search:
    post:
      summary: Searches for cars matching query.
      operationId: searchCars
      requestBody:
        description: The car query.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/car_query"
      responses:
        '200':
          description: The search was completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/existing_car"

  /orders:
    post:
      summary: Creates an order
      operationId: createOrder
      requestBody:
        description: Order data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_order"
      responses:
        '200':
          description: The order was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_order"
        '404':
          description: Either user or car could not be found.
        '409':
          description: The car is already reserved (purchase orders) or the given client is not the owner of the car (service order)..

  /orders/{orderId}:
    get:
      summary: Fetches order data by id.
      operationId: findOrderById
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The order was found successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/existing_order"
        '404':
          description: Could not find an order by the given id.
    patch:
      summary: Patches the order by id.
      operationId: editOrderById
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The order was patched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/edit_order"
        '404':
          description: Could not find an order by the given id.
    delete:
      summary: Deletes an order by id.
      operationId: deleteOrderById
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The order was deleted successfully.
        '404':
          description: Could not find an order by the given id.
        '409':
          description: The deleted order is a purchase and there exist service orders that depend on it.

  /orders/search:
    post:
      summary: Searches for orders matching query.
      operationId: searchOrders
      requestBody:
        description: The query
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order_query"
      responses:
        '200':
          description: The search was completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/existing_order"

  /users/{userId}/orders:
    get:
      summary: Fetches orders by user id.
      operationId: findOrdersByClientId
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
        - name: sorting
          in: query
          description: Sorting order
          schema:
            $ref: "#/components/schemas/order_sorting"
      responses:
        '200':
          description: Found the user's orders successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/existing_order"
  /users/me/orders:
    get:
      summary: Fetches orders of the current user.
      operationId: findOrdersByCurrentUser
      parameters:
        - name: sorting
          in: query
          description: Sorting order
          schema:
            $ref: "#/components/schemas/order_sorting"
      responses:
        '200':
          description: Found the user's orders successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/existing_order"

security:
  - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    new_user:
      type: object
      properties:
        username:
          description: The user's username.
          type: string
          pattern: "[A-Za-z0-9_\\-.]{3,20}"
          example: Example_User
        phone_number:
          description: The user's phone number.
          type: string
          pattern: "\\+?\\d{8,13}"
          example: "+71234567890"
        email:
          description: The user's email.
          type: string
          format: email
        password:
          description: The user's password.
          type: string
          format: password
          pattern: "[-~]{8,}"
          example: password
        role:
          description: The user's role.
          type: string
          enum: [ client, manager, admin ]
    existing_user:
      type: object
      properties:
        id:
          type: integer
          example: 61
        username:
          type: string
          example: "Example_User"
        phone_number:
          type: string
          pattern: "\\+?\\d{8,13}"
          example: "+71234567890"
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ client, manager, admin ]
    user_query:
      type: object
      properties:
        username:
          description: Username query
          type: string
        roles:
          description: Allowed roles
          type: array
          items:
            type: string
            enum: [ client, manager, admin ]
        phone_number:
          description: Phone number query
          type: string
        email:
          description: Email query
          type: string
        purchases:
          description: Purchase count range
          type: object
          properties:
            min:
              description: Minimum purchase count, inclusive
              type: integer
            max:
              description: Maximum purchase count, inclusive
              type: integer
        sorting:
          description: >
            Sort order:
             * `username` - Sorted by username, from A to Z
             * `username_reversed` - Sorted by username, from Z to A
             * `email` - Sorted by email, from A to Z
             * `email_reversed` - Sorted by email, from Z to A
             * `role` - Sorted by role in order: `client`, `manager`, `admin`
             * `role_reversed` - Sorted by role in order: `admin`, `manager`, `client`
             * `more_purchases_first` - Sorted by purchase count in descending order
             * `fewer_purchases_first` - Sorted by purchase count in ascending order
          type: string
          enum: [ username, username_reversed, email, email_reversed, role, role_reversed, more_purchases_first, fewer_purchases_first ]
          default: username

    new_car:
      type: object
      properties:
        brand:
          description: Car brand.
          type: string
        model:
          description: Car model.
          type: string
        production_year:
          description: Car production year, must not be greater than the current year.
          type: integer
        price:
          description: Car price.
          type: integer
        condition:
          description: Car condition.
          type: string
    existing_car:
      type: object
      properties:
        id:
          description: Car id.
          type: integer
        brand:
          description: Car brand.
          type: string
          example: Chevrolet
        model:
          description: Car model.
          type: string
          example: Lacetti
        production_year:
          description: Car production year.
          type: integer
          example: 2006
        price:
          description: Car price.
          type: integer
          example: 200000
        condition:
          description: Car condition.
          type: string
          example: fair
        available_for_purchase:
          description: Is true if there are no purchase orders placed for this car.
          type: boolean
    car_query:
      type: object
      properties:
        brand:
          description: Car brand query.
          type: string
        model:
          description: Car model query.
          type: string
        production_year:
          description: Car production year range.
          type: object
          properties:
            min:
              description: Minimum production year, inclusive.
              type: integer
            max:
              description: Maximum production year, inclusive.
              type: integer
        price:
          description: Car price range.
          type: object
          properties:
            min:
              description: Minimum car price, inclusive.
              type: integer
            max:
              description: Maximum production year, inclusive.
              type: integer
        condition:
          description: Car condition query.
          type: string
        availability:
          description: Car purchase availability filter.
          type: boolean
        sorting:
          description: |
            Sort order:
             * `name` - Sorted by concatenation brand + ' ' + model, from A to Z
             * `name_reversed` - Sorted by concatenation brand + ' ' + model, from Z to A
             * `older_first` - Sorted by production year, ascending.
             * `newer_first` - Sorted by production year, descending.
             * `cheaper_first` - Sorted by price, ascending.
             * `expensive_first` - Sorted by price, descending.
          type: string
          enum: [ name, name_reversed, older_first, newer_first, cheaper_first, expensive_first ]
          default: name

    new_order:
      type: object
      properties:
        kind:
          description: The kind of the order.
          type: string
          enum: [ purchase, service ]
          default: purchase
        state:
          description: The initial order state.
          type: string
          enum: [ new, performing, done, cancelled ]
          default: new
        client_id:
          description: The id of the user who orders service on/purchases a car.
          type: integer
          default: The id of the current user.
        car_id:
          description: The id of the car in question.
          type: integer
    existing_order:
      type: object
      properties:
        id:
          description: The id of the order.
          type: integer
        created_at:
          description: The ISO order creation timestamp at UTC.
          type: string
          format: date-time
        kind:
          description: The kind of the order.
          type: string
          enum: [ purchase, service ]
        state:
          description: The state of the order.
          type: string
          enum: [ new, performing, done, cancelled ]
        client:
          $ref: "#/components/schemas/existing_user"
        car:
          $ref: "#/components/schemas/existing_car"
        comment:
          description: Order comments.
          type: string
          example: |
            There was a little accident. I want you to repaint the bumper.
            Sir, your car is a meter shorter than it should be.
    order_query:
      type: object
      properties:
        dates:
          description: The order creation timestamp range.
          type: object
          properties:
            min:
              description: The earliest date to show, inclusive.
              type: string
              format: date-time
            max:
              description: The latest date to show, inclusive.
              type: string
              format: date-time
        username:
          description: Client username query.
          type: string
        car_brand:
          description: Car brand query.
          type: string
        car_model:
          description: Car model query.
          type: string
        kind:
          description: Order kind filter.
          type: string
          enum: [ purchase, service ]
        state:
          description: Allowed order states.
          type: array
          items:
            type: string
            enum: [ new, performing, done, cancelled ]
        sorting:
          $ref: "#/components/schemas/order_sorting"
    edit_order:
      type: object
      properties:
        state:
          description: State of the order.
          type: string
          enum: [ new, performing, done, cancelled ]
        append_comment:
          description: The new line of comment.
          type: string
    order_sorting:
      description: >
        Sort order:
         * `oldest_first` - Sorted by created at timestamp, ascending.
         * `latest_first` - Sorted by created at timestamp, descending.
         * `car_name` - Sorted by the concatenation car brand + ' ' + car model, A to Z.
         * `car_name_reversed` - Sorted by the concatenation car brand + ' ' + car model, Z to A.
      type: string
      enum: [ oldest_first, latest_first, car_name, car_name_reversed ]
      default: latest_first