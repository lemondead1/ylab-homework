plugins {
    id 'application'
    id 'io.freefair.lombok' version '8.6'
}

group = 'com.lemondead1.carshopservice'

application {
    mainClass = "com.lemondead1.carshopservice.CarShopServiceApplication"
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"

    implementation "jakarta.servlet:jakarta.servlet-api:${servlet_api_version}"
    implementation "org.springframework:spring-context:${spring_version}"
    implementation "org.springframework:spring-web:${spring_version}"
    implementation "org.springframework:spring-webmvc:${spring_version}"
    implementation "org.springframework:spring-aop:${spring_version}"
    implementation "jakarta.annotation:jakarta.annotation-api:${jakarta_annotations_version}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc_version}"
    implementation "org.aspectj:aspectjrt:${aspectj_version}"
    implementation "org.aspectj:aspectjweaver:${aspectj_version}"

    implementation "org.liquibase:liquibase-core:${liquibase_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    implementation "org.slf4j:slf4j-api:${slf4j_api_version}"
    implementation "ch.qos.logback:logback-classic:${logback_version}"

    implementation "org.eclipse.jetty.ee10:jetty-ee10-servlet:${jetty_version}"

    runtimeOnly "org.postgresql:postgresql:${postgres_driver_version}"

    compileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_version}"

    testImplementation platform("org.junit:junit-bom:${junit_version}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
    testImplementation "org.assertj:assertj-core:${assertj_version}"
    testImplementation "org.testcontainers:testcontainers:${testcontainers_version}"
    testImplementation "org.testcontainers:postgresql:${testcontainers_version}"
    testImplementation "org.springframework:spring-test:${spring_version}"
}

compileJava {
    options.compilerArgs << '-parameters'
}

jar {
    manifest.attributes('Main-Class': application.mainClass)

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy DuplicatesStrategy.WARN
}

test {
    useJUnitPlatform()
}

tasks.register('buildDockerImage', Exec) {
    doFirst {
        mkdir "${layout.buildDirectory.get()}/docker"
    }

    dependsOn jar

    workingDir = "${projectDir}"
    commandLine "docker", "build", "-t=carshop-service", "--build-arg=JAR_PATH=build/libs/CarShop-Service.jar", "."
}

tasks.register('runDocker', Exec) {
    dependsOn buildDockerImage

    commandLine "docker", "compose", "pull"
    commandLine "docker", "compose", "up", "-d"
}

build {
    dependsOn buildDockerImage
}